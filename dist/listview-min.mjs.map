{"version":3,"file":"listview-min.mjs","names":["#onKeyDown","#layout","#renderRequestId","#render","#rowHeight","#resizeObserver","#model","#placeholderRows","#onscroll","#simulatedScrollTop","#layoutRequestId","#viewportHeight","#virtualRowCount","#verticalScale","#addRow","#removeRow"],"sources":["../../listview.mjs"],"sourcesContent":["/// <reference path=\"./listview.d.ts\"/>\r\nconst defaultCreatePlaceholderRow=()=>{\r\n  const el=document.createElement(\"div\");\r\n  el.textContent='placeholder';\r\n  return el;\r\n}\r\n/** @type {ListModel} */\r\nconst EMPTY_LIST_MODEL={\r\n  count:0,\r\n  createPlaceholderRow(){\r\n    throw new Error('unimplemented');\r\n  },\r\n  render(_placeholderRow,_index){\r\n    throw new Error('unimplemented');\r\n  }\r\n};\r\nconst heightOf=(el,includeMargins=true)=>{\r\n  const style=getComputedStyle(el);\r\n  return parseFloat(style.height)+(includeMargins?parseFloat(style.marginTop)+parseFloat(style.marginBottom):0);\r\n};\r\n// const styles=await(await fetch(new URL('./listview.css',import.meta.url))).text();\r\nconst styles=`:host{position:relative;display:grid !important;overflow-x:hidden !important;padding:0 !important;border:0 !important;--scrollbar-width:17px}\r\n.viewport{position:absolute;overflow-y:auto;scrollbar-gutter:stable}\r\n.virtual.viewport{overflow-y:scroll;scrollbar-width:auto;inset:0 var(--scrollbar-width) 0 0;display:grid;grid-template-columns:1fr calc(var(--scrollbar-width) * 2);inset-inline-end:calc(var(--scrollbar-width) * -2)}\r\n.scaled.viewport{right:0;top:0;bottom:0;width:calc(var(--scrollbar-width) + 1px)}`;\r\nexport default class ListView extends HTMLElement{\r\n  #model=EMPTY_LIST_MODEL;\r\n  #rowHeight=0;\r\n  #viewportHeight=0;\r\n  #verticalScale=1;\r\n  #virtualRowCount=0;\r\n  #placeholderRows=[];\r\n  #resizeObserver=new ResizeObserver(_entries=>{\r\n    document.removeEventListener('keydown',this.#onKeyDown);\r\n    this.#layout();\r\n  });\r\n  #simulatedScrollTop=0;\r\n  #layoutRequestId=0;\r\n  #renderRequestId=0;\r\n  #onKeyDown;\r\n  #onscroll=()=>{\r\n    cancelAnimationFrame(this.#renderRequestId);\r\n    this.#renderRequestId=requestAnimationFrame(()=>this.#render(false));\r\n  };\r\n  constructor(){\r\n    super();\r\n    const root=this.attachShadow({mode:'open'});\r\n    const style=document.createElement('style');\r\n    style.textContent=styles;\r\n    root.appendChild(style);\r\n/*\r\n   <style>...</style>\r\n   <div class=\"virtual viewport\"> (grid) (scroll)\r\n     <div style=\"margin-top: ?px\">\r\n       <slot name=\"virtual\">\r\n         ...light dom rows...\r\n       </slot>\r\n     </div>\r\n     <div class=\"gutter\"></div>\r\n   </div>\r\n   <div class=\"scaled viewport\"> (scroll)\r\n     <div style=\"height: ?px\"></div>\r\n   </div>\r\n */\r\n    const scaledViewport=document.createElement('div');\r\n    scaledViewport.classList.add('viewport');\r\n    scaledViewport.classList.add('scaled');\r\n    const scaledView=document.createElement('div');\r\n    scaledViewport.appendChild(scaledView);\r\n    const virtualViewport=document.createElement('div');\r\n    virtualViewport.classList.add('viewport');\r\n    virtualViewport.classList.add('virtual');\r\n    const virtualView=document.createElement('div');\r\n    const slot=document.createElement('slot');\r\n    slot.name='virtual';\r\n    virtualView.appendChild(slot);\r\n    const gutter=document.createElement('div');\r\n    virtualViewport.appendChild(virtualView);\r\n    virtualViewport.appendChild(gutter);\r\n    root.appendChild(virtualViewport);\r\n    root.appendChild(scaledViewport);\r\n    this.#onKeyDown=e=>{\r\n      if(e.ctrlKey||e.metaKey){\r\n        if(e.shiftKey) return;\r\n        if(e.key==='Home'){\r\n          e.preventDefault();\r\n          virtualViewport.scrollTop=scaledViewport.scrollTop=0;\r\n        }else if(e.key==='End'){\r\n          e.preventDefault();\r\n          scaledViewport.scrollTop=scaledViewport.scrollHeight;\r\n        }\r\n      }\r\n      else if(!e.shiftKey){\r\n        if(e.key==='PageDown'){\r\n          e.preventDefault();\r\n          const rowHeight=this.#rowHeight;\r\n          virtualViewport.scrollTop+=Math.max(rowHeight,(virtualViewport.clientHeight-rowHeight));\r\n        }else if(e.key==='PageUp'){\r\n          e.preventDefault();\r\n          const rowHeight=this.#rowHeight;\r\n          virtualViewport.scrollTop-=Math.max(rowHeight,(virtualViewport.clientHeight-rowHeight));\r\n        }\r\n      }\r\n    };\r\n  }\r\n  // noinspection JSUnusedGlobalSymbols\r\n  connectedCallback(){\r\n    this.#layout();\r\n    setTimeout(()=>{if(this.isConnected) this.#resizeObserver.observe(this)},0);\r\n  }\r\n  // noinspection JSUnusedGlobalSymbols\r\n  disconnectedCallback(){\r\n    this.#resizeObserver.unobserve(this);\r\n    document.removeEventListener('keydown',this.#onKeyDown);\r\n  }\r\n  set model(/** @type {ListModel} */ model){\r\n    this.#model=model??EMPTY_LIST_MODEL;\r\n    // clear placeholder rows from the latest model\r\n    const placeholderRows=this.#placeholderRows;\r\n    for(const it of placeholderRows.splice(0,placeholderRows.length)){\r\n      it.remove();\r\n    }\r\n    if(this.isConnected){\r\n      // reset scroll position to top and trigger layout\r\n      const root=this.shadowRoot;\r\n      const scaledViewport=root.querySelector('.scaled.viewport');\r\n      const virtualViewport=root.querySelector('.virtual.viewport');\r\n      const virtualView=virtualViewport.firstElementChild;\r\n      scaledViewport.removeEventListener('scroll',this.#onscroll);\r\n      virtualViewport.removeEventListener('scroll',this.#onscroll);\r\n      virtualView.style.removeProperty('marginTop');\r\n      this.#simulatedScrollTop=0;\r\n      scaledViewport.scrollTop=0;\r\n      document.removeEventListener('keydown',this.#onKeyDown);\r\n      this.#layout();\r\n    }\r\n  }\r\n  #layout(){\r\n    // only layout once per animation frame\r\n    clearInterval(this.#layoutRequestId);\r\n    this.#layoutRequestId=setTimeout(()=>{\r\n      const model=this.#model;\r\n      const root=this.shadowRoot;\r\n      const scaledViewport=root.querySelector('.scaled.viewport');\r\n      const virtualViewport=root.querySelector('.virtual.viewport');\r\n      const scaledView=scaledViewport.firstElementChild;\r\n      const virtualView=scaledViewport.firstElementChild;\r\n      const count=typeof model.count==='number'?model.count:model.count();\r\n      if(count===0){\r\n        this.#rowHeight=0;\r\n        this.#viewportHeight=0;\r\n        this.#virtualRowCount=0;\r\n        this.#verticalScale=1;\r\n        this.#simulatedScrollTop=0;\r\n        virtualViewport.scrollTop=0;\r\n        scaledView.style.setProperty('height','0px');\r\n        return;\r\n      }\r\n      // get the row height from the first (virtual) row (in the light dom), which might not yet exist\r\n      const rowHeight=this.#rowHeight=heightOf(this.#placeholderRows[0]??this.#addRow());\r\n      const simulatedHeight=rowHeight*count;\r\n      // dom element height is capped at different values on different browsers, we use 1 million px as a \"safe\" value\r\n      // and scale the real view height beyond that number\r\n      const verticalScale=this.#verticalScale=Math.max(1,Math.ceil(simulatedHeight/1_000_000));\r\n      // deduce how many virtual rows we need from the viewport height\r\n      const viewportHeight=this.#viewportHeight=heightOf(root.host,false);\r\n      // +2 because the rows before and after might be partially visible\r\n      // *3 because we want to render enough for page up and down\r\n      const virtualRowCount=this.#virtualRowCount=Math.ceil(viewportHeight/rowHeight+2)*3;\r\n      // console.debug(`count: ${count}, row: ${rowHeight}px, scale: ${verticalScale}`);\r\n      // console.debug(`viewport: ${viewportHeight}px, virtual count: ${virtualRowCount}`);\r\n      // add or remove virtual rows (in the light dom) to match the desired count\r\n      const placeholderRows=this.#placeholderRows;\r\n      while(placeholderRows.length<virtualRowCount) this.#addRow();\r\n      while(placeholderRows.length>virtualRowCount) this.#removeRow();\r\n      // update the scaled view height\r\n      scaledView.style.setProperty('height',`${simulatedHeight/verticalScale+viewportHeight/verticalScale}px`);\r\n      // index of the first visible row (not an integer if the first row is partially visible)\r\n      let index=this.#simulatedScrollTop/rowHeight;\r\n      // index of the first virtual row (we try to have 1/3 above and below)\r\n      let k=index-virtualRowCount/3;\r\n      // adjust if we are at/near the end (we don't want to go past the end)\r\n      k=Math.min(k,count-virtualRowCount);\r\n      // adjust if we are at/near the start\r\n      k=Math.max(0,k);\r\n      // decimal part is set as virtual margin\r\n      const partialRowOffset=(k-Math.trunc(k))*rowHeight;\r\n      virtualView.style.marginTop=`-${partialRowOffset}px`;\r\n      // adjust virtual scroll top\r\n      virtualViewport.scrollTop=(index-k)*rowHeight;\r\n      // set css variable for the scrollbar width\r\n      const scrollbarWidth=virtualViewport.offsetWidth-virtualViewport.clientWidth;\r\n      if(scrollbarWidth>0) root.host.style.setProperty('--scrollbar-width',`${scrollbarWidth}px`);\r\n      document.addEventListener('keydown',this.#onKeyDown,true);\r\n      // layout is done, trigger a render\r\n      this.#render(true);\r\n    },0);\r\n  }\r\n  #render(_immediate){\r\n    const root=this.shadowRoot;\r\n    const scaledViewport=root.querySelector('.scaled.viewport');\r\n    const virtualViewport=root.querySelector('.virtual.viewport');\r\n    const virtualView=virtualViewport.firstElementChild;\r\n    // we don't want to trigger the scroll events when we adjust the scroll positions in render\r\n    scaledViewport.removeEventListener('scroll',this.#onscroll);\r\n    virtualViewport.removeEventListener('scroll',this.#onscroll);\r\n    const verticalScale=this.#verticalScale;\r\n    const rowHeight=this.#rowHeight;\r\n    const viewportHeight=this.#viewportHeight;\r\n    const virtualRowCount=this.#virtualRowCount\r\n    const model=this.#model;\r\n    const count=typeof model.count==='number'?model.count:model.count();\r\n    // simulated scroll top before adjustment due to scroll changes\r\n    let simulatedScrollTop=this.#simulatedScrollTop;\r\n    // index of the first visible row (not an integer if the first row is partially visible) before adjustment\r\n    let index=simulatedScrollTop/rowHeight;\r\n    // index of the first virtual row (we try to have 1/3 above and below) before adjustment\r\n    let k=index-virtualRowCount/3;\r\n    // adjust if we are at/near the end (we don't want to go past the end)\r\n    k=Math.min(k,count-virtualRowCount);\r\n    // adjust if we are at/near the start\r\n    k=Math.max(0,k);\r\n    // virtual view scroll top before adjustment\r\n    let virtualScrollTop=(index-k)*rowHeight;\r\n    // the scaled scroll should only trigger when interacted with the scrollbar directly\r\n    // mouse wheel events and touch scrolls should be triggered on the virtual scroll\r\n    // the simulated scroll position is computed from the combination of those two\r\n    // scroll adjustment\r\n    let verticalScrollAmount=0;\r\n    // the scaled scroll top only participates if it has moved more than 1px\r\n    let scaledScrollTop=Math.trunc(scaledViewport.scrollTop);\r\n    if(Math.abs(scaledScrollTop-simulatedScrollTop/verticalScale)>1){\r\n      verticalScrollAmount=scaledScrollTop*verticalScale-simulatedScrollTop;\r\n    }\r\n    verticalScrollAmount+=virtualViewport.scrollTop-virtualScrollTop;\r\n    // include partial row offset\r\n    let partialRowOffset=parseFloat(virtualView.style.getPropertyValue('marginTop')||0);\r\n    verticalScrollAmount+=partialRowOffset;\r\n    // update simulated scroll top\r\n    simulatedScrollTop=this.#simulatedScrollTop=Math.max(\r\n      0,Math.min(count*rowHeight-viewportHeight,simulatedScrollTop+verticalScrollAmount)\r\n    );\r\n    // update scaled scroll top if necessary\r\n    scaledScrollTop=Math.trunc(simulatedScrollTop/verticalScale);\r\n    if(scaledScrollTop!==scaledViewport.scrollTop){\r\n      scaledViewport.scrollTop=scaledScrollTop;\r\n    }\r\n    // TODO we want to only update virtual scroll on idle or until bounds are reached, otherwise we cancel the native inertia\r\n    index=simulatedScrollTop/rowHeight;\r\n    k=index-virtualRowCount/3;\r\n    k=Math.min(k,count-virtualRowCount);\r\n    k=Math.max(0,k);\r\n    // decimal part is set as margin\r\n    partialRowOffset=(k-Math.trunc(k))*rowHeight;\r\n    virtualView.style.marginTop=`-${partialRowOffset}px`;\r\n    // update virtual scroll top if necessary\r\n    virtualScrollTop=(index-k)*rowHeight;\r\n    if(virtualScrollTop!==virtualViewport.scrollTop){\r\n      virtualViewport.scrollTop=virtualScrollTop;\r\n    }\r\n    k=Math.trunc(k);\r\n    // render the virtual rows\r\n    const placeholderRows=this.#placeholderRows;\r\n    for(const it of placeholderRows){\r\n      if(++k>count){\r\n        it.style.visibility='hidden';\r\n      }else{\r\n        it.style.removeProperty('visibility');\r\n        model.render(it,k-1);\r\n      }\r\n    }\r\n    // restore the scroll listeners\r\n    scaledViewport.addEventListener('scroll',this.#onscroll);\r\n    virtualViewport.addEventListener('scroll',this.#onscroll);\r\n  }\r\n  #addRow(){\r\n    const createPlaceholderRow=this.#model.createPlaceholderRow;\r\n    let placeholderRow=createPlaceholderRow?createPlaceholderRow():defaultCreatePlaceholderRow();\r\n    if(placeholderRow instanceof DocumentFragment){\r\n      const children=[...placeholderRow.children];\r\n      if(children.length!==1) throw new Error('Placeholder cannot be a document fragment with multiple first level elements.');\r\n      placeholderRow=children[0];\r\n    }\r\n    placeholderRow.style.visibility='hidden';\r\n    placeholderRow.slot='virtual';\r\n    this.#placeholderRows.push(placeholderRow);\r\n    return this.appendChild(placeholderRow);\r\n  }\r\n  #removeRow(){\r\n    this.#placeholderRows.pop().remove();\r\n  }\r\n}\r\ncustomElements.define('list-view', ListView);\r\nexport {ListView};\r\n"],"mappings":"AACA,MAAM,4BAA4B,IAAI,CACpC,MAAM,EAAG,SAAS,cAAc,MAAM,CACtC,EAAG,YAAY,cACf,OAAO,CACR,EAEK,iBAAiB,CACrB,MAAM,EACN,sBAAsB,CACpB,MAAM,IAAI,MAAM,gBACjB,EACD,OAAO,EAAgB,EAAO,CAC5B,MAAM,IAAI,MAAM,gBACjB,CACF,EACK,SAAS,CAAC,EAAG,OAAsB,CACvC,MAAM,EAAM,iBAAiB,EAAG,CAChC,MAAO,YAAW,EAAM,OAAO,EAAE,EAAe,WAAW,EAAM,UAAU,CAAC,WAAW,EAAM,aAAa,CAAC,EAC5G,EAEK,OAAA,sgBAIe,SAAN,cAAuB,WAAW,CAC/C,OAAO,iBACP,WAAW,EACX,gBAAgB,EAChB,eAAe,EACf,iBAAiB,EACjB,iBAAiB,CAAE,EACnB,gBAAgB,IAAI,eAAe,CAAA,IAAU,CAE3C,AADA,SAAS,oBAAoB,UAAU,KAAKA,WAAW,CACvD,KAAKC,SAAS,AACf,GACD,oBAAoB,EACpB,iBAAiB,EACjB,iBAAiB,EACjB,WACA,UAAU,IAAI,CAEZ,AADA,qBAAqB,KAAKC,iBAAiB,CAC3C,KAAKA,iBAAiB,sBAAsB,IAAI,KAAKC,WAAc,CAAC,AACrE,EACD,aAAa,CACX,OAAO,CACP,MAAM,EAAK,KAAK,aAAa,CAAC,KAAK,MAAO,EAAC,CACrC,EAAM,SAAS,cAAc,QAAQ,CAC3C,EAAM,YAAY,OAClB,EAAK,YAAY,EAAM,CAevB,MAAM,EAAe,SAAS,cAAc,MAAM,CAClD,EAAe,UAAU,IAAI,WAAW,CACxC,EAAe,UAAU,IAAI,SAAS,CACtC,MAAM,EAAW,SAAS,cAAc,MAAM,CAC9C,EAAe,YAAY,EAAW,CACtC,MAAM,EAAgB,SAAS,cAAc,MAAM,CACnD,EAAgB,UAAU,IAAI,WAAW,CACzC,EAAgB,UAAU,IAAI,UAAU,CACxC,MAAM,EAAY,SAAS,cAAc,MAAM,CACzC,EAAK,SAAS,cAAc,OAAO,CACzC,EAAK,KAAK,UACV,EAAY,YAAY,EAAK,CAC7B,MAAM,EAAO,SAAS,cAAc,MAAM,CAC1C,EAAgB,YAAY,EAAY,CACxC,EAAgB,YAAY,EAAO,CACnC,EAAK,YAAY,EAAgB,CACjC,EAAK,YAAY,EAAe,CAChC,KAAKH,WAAW,CAAA,IAAG,CACjB,GAAG,EAAE,SAAS,EAAE,QAAQ,CACtB,GAAG,EAAE,SAAU,OACf,GAAG,EAAE,MAAM,OAET,AADA,EAAE,gBAAgB,CAClB,EAAgB,UAAU,EAAe,UAAU,UAC5C,EAAE,MAAM,MAEf,AADA,EAAE,gBAAgB,CAClB,EAAe,UAAU,EAAe,YAE3C,UACQ,EAAE,aACN,EAAE,MAAM,WAAW,CACpB,EAAE,gBAAgB,CAClB,MAAM,EAAU,KAAKI,WACrB,EAAgB,WAAW,KAAK,IAAI,EAAW,EAAgB,aAAa,EAAW,AACxF,SAAQ,EAAE,MAAM,SAAS,CACxB,EAAE,gBAAgB,CAClB,MAAM,EAAU,KAAKA,WACrB,EAAgB,WAAW,KAAK,IAAI,EAAW,EAAgB,aAAa,EAAW,AACxF,EAEJ,CACF,CAED,mBAAmB,CAEjB,AADA,KAAKH,SAAS,CACd,WAAW,IAAI,CAAC,GAAG,KAAK,YAAa,KAAKI,gBAAgB,QAAQ,KAAK,AAAC,EAAC,EAAE,AAC5E,CAED,sBAAsB,CAEpB,AADA,KAAKA,gBAAgB,UAAU,KAAK,CACpC,SAAS,oBAAoB,UAAU,KAAKL,WAAW,AACxD,CACD,IAAI,MAA+B,EAAM,CACvC,KAAKM,OAAO,GAAO,iBAEnB,MAAM,EAAgB,KAAKC,iBAC3B,IAAI,MAAM,KAAM,EAAgB,OAAO,EAAE,EAAgB,OAAO,CAC9D,EAAG,QAAQ,CAEb,GAAG,KAAK,YAAY,CAElB,MAAM,EAAK,KAAK,WACV,EAAe,EAAK,cAAc,mBAAmB,CACrD,EAAgB,EAAK,cAAc,oBAAoB,CACvD,EAAY,EAAgB,kBAClC,EAAe,oBAAoB,SAAS,KAAKC,UAAU,CAC3D,EAAgB,oBAAoB,SAAS,KAAKA,UAAU,CAC5D,EAAY,MAAM,eAAe,YAAY,CAC7C,KAAKC,oBAAoB,EACzB,EAAe,UAAU,EACzB,SAAS,oBAAoB,UAAU,KAAKT,WAAW,CACvD,KAAKC,SAAS,AACf,CACF,CACD,SAAS,CAGP,AADA,cAAc,KAAKS,iBAAiB,CACpC,KAAKA,iBAAiB,WAAW,IAAI,CACnC,MAAM,EAAM,KAAKJ,OACX,EAAK,KAAK,WACV,EAAe,EAAK,cAAc,mBAAmB,CACrD,EAAgB,EAAK,cAAc,oBAAoB,CACvD,EAAW,EAAe,kBAC1B,EAAY,EAAe,kBAC3B,SAAa,EAAM,QAAQ,SAAS,EAAM,MAAM,EAAM,OAAO,CACnE,GAAG,IAAQ,EAAE,CACX,KAAKF,WAAW,EAChB,KAAKO,gBAAgB,EACrB,KAAKC,iBAAiB,EACtB,KAAKC,eAAe,EACpB,KAAKJ,oBAAoB,EACzB,EAAgB,UAAU,EAC1B,EAAW,MAAM,YAAY,SAAS,MAAM,CAC5C,MACD,CAED,MAAM,EAAU,KAAKL,WAAW,SAAS,KAAKG,iBAAiB,IAAI,KAAKO,SAAS,CAAC,CAC5E,EAAgB,EAAU,EAG1B,EAAc,KAAKD,eAAe,KAAK,IAAI,EAAE,KAAK,KAAK,EAAgB,IAAU,CAAC,CAElF,EAAe,KAAKF,gBAAgB,SAAS,EAAK,QAAW,CAG7D,EAAgB,KAAKC,iBAAiB,KAAK,KAAK,EAAe,EAAU,EAAE,CAAC,EAI5E,EAAgB,KAAKL,iBAC3B,MAAM,EAAgB,OAAO,EAAiB,KAAKO,SAAS,CAC5D,MAAM,EAAgB,OAAO,EAAiB,KAAKC,YAAY,CAE/D,EAAW,MAAM,YAAY,UAAU,EAAE,EAAgB,EAAc,EAAe,EAAc,IAAI,CAExG,IAAI,EAAM,KAAKN,oBAAoB,EAE/B,EAAE,EAAM,EAAgB,EAE5B,EAAE,KAAK,IAAI,EAAE,EAAM,EAAgB,CAEnC,EAAE,KAAK,IAAI,EAAE,EAAE,CAEf,MAAM,GAAkB,EAAE,KAAK,MAAM,EAAE,EAAE,EACzC,EAAY,MAAM,WAAW,GAAG,EAAiB,IAEjD,EAAgB,WAAW,EAAM,GAAG,EAEpC,MAAM,EAAe,EAAgB,YAAY,EAAgB,YACjE,GAAG,EAAe,EAAG,EAAK,KAAK,MAAM,YAAY,qBAAqB,EAAE,EAAe,IAAI,CAC3F,SAAS,iBAAiB,UAAU,KAAKT,cAAgB,CAEzD,KAAKG,WAAa,AACnB,EAAC,EAAE,AACL,CACD,QAAQ,EAAW,CACjB,MAAM,EAAK,KAAK,WACV,EAAe,EAAK,cAAc,mBAAmB,CACrD,EAAgB,EAAK,cAAc,oBAAoB,CACvD,EAAY,EAAgB,kBAElC,EAAe,oBAAoB,SAAS,KAAKK,UAAU,CAC3D,EAAgB,oBAAoB,SAAS,KAAKA,UAAU,CAC5D,MAAM,EAAc,KAAKK,eACnB,EAAU,KAAKT,WACf,EAAe,KAAKO,gBACpB,EAAgB,KAAKC,iBACrB,EAAM,KAAKN,OACX,SAAa,EAAM,QAAQ,SAAS,EAAM,MAAM,EAAM,OAAO,CAEnE,IAAI,EAAmB,KAAKG,oBAExB,EAAM,EAAmB,EAEzB,EAAE,EAAM,EAAgB,EAE5B,EAAE,KAAK,IAAI,EAAE,EAAM,EAAgB,CAEnC,EAAE,KAAK,IAAI,EAAE,EAAE,CAEf,IAAI,GAAkB,EAAM,GAAG,EAK3B,EAAqB,EAErB,EAAgB,KAAK,MAAM,EAAe,UAAU,CACxD,GAAG,KAAK,IAAI,EAAgB,EAAmB,EAAc,CAAC,EAC5D,EAAqB,EAAgB,EAAc,EAErD,GAAsB,EAAgB,UAAU,EAEhD,IAAI,EAAiB,WAAW,EAAY,MAAM,iBAAiB,YAAY,EAAE,EAAE,CACnF,GAAsB,EAEtB,EAAmB,KAAKA,oBAAoB,KAAK,IAC/C,EAAE,KAAK,IAAI,EAAM,EAAU,EAAe,EAAmB,EAAqB,CACnF,CAED,EAAgB,KAAK,MAAM,EAAmB,EAAc,CAC5D,GAAG,IAAkB,EAAe,UAClC,EAAe,UAAU,EAG3B,EAAM,EAAmB,EACzB,EAAE,EAAM,EAAgB,EACxB,EAAE,KAAK,IAAI,EAAE,EAAM,EAAgB,CACnC,EAAE,KAAK,IAAI,EAAE,EAAE,CAEf,GAAkB,EAAE,KAAK,MAAM,EAAE,EAAE,EACnC,EAAY,MAAM,WAAW,GAAG,EAAiB,IAEjD,GAAkB,EAAM,GAAG,EAC3B,GAAG,IAAmB,EAAgB,UACpC,EAAgB,UAAU,EAE5B,EAAE,KAAK,MAAM,EAAE,CAEf,MAAM,EAAgB,KAAKF,iBAC3B,IAAI,MAAM,KAAM,EACd,GAAG,EAAE,EAAE,EACL,EAAG,MAAM,WAAW,cAGpB,AADA,EAAG,MAAM,eAAe,aAAa,CACrC,EAAM,OAAO,EAAG,EAAE,EAAE,CAIxB,EAAe,iBAAiB,SAAS,KAAKC,UAAU,CACxD,EAAgB,iBAAiB,SAAS,KAAKA,UAAU,AAC1D,CACD,SAAS,CACP,MAAM,EAAqB,KAAKF,OAAO,qBACvC,IAAI,EAAe,EAAqB,GAAsB,CAAC,6BAA6B,CAC5F,GAAG,aAA0B,iBAAiB,CAC5C,MAAM,EAAS,CAAC,GAAG,EAAe,QAAS,EAC3C,GAAG,EAAS,SAAS,EAAG,MAAM,IAAI,MAAM,iFACxC,EAAe,EAAS,EACzB,CACD,EAAe,MAAM,WAAW,SAChC,EAAe,KAAK,UACpB,KAAKC,iBAAiB,KAAK,EAAe,CAC1C,MAAO,MAAK,YAAY,EAAe,AACxC,CACD,YAAY,CACV,KAAKA,iBAAiB,KAAK,CAAC,QAAQ,AACrC,CACF,EACD,eAAe,OAAO,YAAa,SAAS"}